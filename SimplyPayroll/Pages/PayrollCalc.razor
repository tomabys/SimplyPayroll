@page "/"

<h1>Payroll Calculator</h1>

<EditForm Model="@payroll" OnSubmit="Calculate">
    <div class="form-group row ml-1">
        <label for="hoursWorked">Hours worked weekly</label>
        <InputNumber id="hoursWorked" @bind-Value="payroll.hoursWorked" class="form-control col-sm-2 ml-3" required />
    </div>

    <div class="form-group row ml-1">
        <label for="hourlyRate">Hourly rate</label>
        <InputNumber id="hourlyRate" @bind-Value="payroll.hourlyRate" class="form-control col-sm-2 ml-3" required />
    </div>

    <button class="btn btn-primary" type="submit">Calculate</button>
</EditForm>

<br />
<p>Hours worked: @payroll.hoursWorked</p>
<p>Hourly rate: @payroll.hourlyRate.ToString("C")</p>
<br />
<p>Gross income weekly : @incomeWeeklyGross.ToString("C")</p>
<p>Gross income yearly : @incomeYearlyGross.ToString("C")</p>
<br />
<p><b>PRSI yearly: @prsiTotal.ToString("C")</b></p>
<br />
<p>USC on the first @uscCutOff1.ToString("C0") yearly: @usc1.ToString("C")</p>
<p>USC on the next @uscCutOff2.ToString("C0") yearly: @usc2.ToString("C")</p>
<p>USC on the next @uscCutOff3.ToString("C0") yearly: @usc3.ToString("C")</p>
<p>USC on the balance yearly: @usc4.ToString("C")</p>
<p><b>USC total yearly: @uscTotal.ToString("C")</b></p>
<br />
<p>Tax at 20%: @tax1.ToString("C")</p>
<p>Tax at 40%: @tax2.ToString("C")</p>
<p>Tax credit: @taxCredit.ToString("C0")</p>
<p><b>Total Tax payable yearly: @totalTaxPayableYearly.ToString("C")</b></p>
<br />
<p><b>Total Deductions: @deductionsTotalYearly.ToString("C")</b></p>
<br />
<p><b>Net income yearly: @incomeYearlyNet.ToString("C")</b></p>
<p><b>Net income weekly: @incomeWeeklyNet.ToString("C")</b></p>


@code {
    PayrollModel payroll = new PayrollModel();


    // income
    static double incomeWeeklyGross;
    static double incomeYearlyGross;

    double CalculateIncomeWeeklyGross()
    {
        return incomeWeeklyGross = payroll.hoursWorked * payroll.hourlyRate;
    }

    double CalculateIncomeYearlyGross()
    {
        return incomeYearlyGross = incomeWeeklyGross * 52;
    }

    // tax
    static int taxCredit = 3300;

    static double taxLimitStandard = 35300;    // income threshold taxed at standard rate
    static double taxLimitHigher = incomeYearlyGross - taxLimitStandard;    // income threshold taxed at higher rate
    static double taxRateStandard = 0.2;    // income threshold taxed at standard rate
    static double taxRateHigher = 0.4;    // income threshold taxed at higher rate
    static double tax1;     // tax at standard rate
    static double tax2;     // tax at higher rate
    static double taxTotalYearly;
    static double totalTaxPayableYearly;   // total tax yearly less tax credit

    double CalculateTotalTaxYearly()  // total tax yearly before tax credit
    {
        if (incomeYearlyGross == 0 || incomeYearlyGross <= taxCredit)
        {
            tax1 = 0;
            tax2 = 0;
            //taxCredit = 0;
            return taxTotalYearly = tax1 + tax2;
        }
        else if (incomeYearlyGross > 0 && incomeYearlyGross > taxCredit && incomeYearlyGross <= taxLimitStandard)
        {
            tax1 = incomeYearlyGross * taxRateStandard;
            tax2 = 0;
        }
        else if (incomeYearlyGross > taxLimitStandard)
        {
            tax1 = taxLimitStandard * taxRateStandard;
            tax2 = (incomeYearlyGross - taxLimitStandard) * taxRateHigher;
        }
        return taxTotalYearly = tax1 + tax2;
    }

    double CalculateTotalTaxPayableYearly()
    {
        if (taxTotalYearly < taxCredit)
        {
            return totalTaxPayableYearly = 0;
        }
        else
        {
            return totalTaxPayableYearly = taxTotalYearly - taxCredit;
        }
    }


    // PRSI
    static double prsiRate = 0.04;
    static double prsiTotal;

    double CalculatePrsi()
    {
        return prsiTotal = incomeYearlyGross * prsiRate;
    }

    // USC
    static int uscCutOff1 = 12012;  // first USC cut-off point
    static int uscCutOff2 = 8472;  // second USC cut-off point
    static int uscCutOff3 = 49560;  // third USC cut-off point

    static double uscExempt = 13000;    // income threshold exempt from USC

    static double uscRate1 = 0.005;  // USC rate for first cut-off point (uscCutOff1)
    static double uscRate2 = 0.02;  // USC rate for second cut-off point (uscCutOff2)
    static double uscRate3 = 0.045;  // USC rate for third cut-off point (uscCutOff3)
    static double uscRate4 = 0.08;  // USC rate for the remaining balance over three cut-off points

    static double usc1;
    static double usc2;
    static double usc3;
    static double usc4;
    static double uscTotal;

    double CalculateUsc()
    {
        if (incomeYearlyGross == 0 || incomeYearlyGross <= uscExempt)
        {
            usc1 = 0;
            usc2 = 0;
            usc3 = 0;
            usc4 = 0;
        }
        // USC for the first and second cut-off point
        else if (incomeYearlyGross > uscExempt && incomeYearlyGross <= uscCutOff1 + uscCutOff2)
        {
            usc1 = uscCutOff1 * uscRate1;
            usc2 = (incomeYearlyGross - uscCutOff1) * uscRate2;
            usc3 = 0;
            usc4 = 0;
        }
        // USC for the next (third) cut-off point
        else if (incomeYearlyGross > uscCutOff1 + uscCutOff2 && incomeYearlyGross <= uscCutOff1 + uscCutOff2 + uscCutOff3)
        {
            usc1 = uscCutOff1 * uscRate1;
            usc2 = uscCutOff2 * uscRate2;
            usc3 = (incomeYearlyGross - uscCutOff1 - uscCutOff2) * uscRate3;
            usc4 = 0;
        }
        // USC for the remaining balance
        else if (incomeYearlyGross > uscCutOff1 + uscCutOff2 + uscCutOff3)
        {
            usc1 = uscCutOff1 * uscRate1;
            usc2 = uscCutOff2 * uscRate2;
            usc3 = uscCutOff3 * uscRate3;
            usc4 = (incomeYearlyGross - uscCutOff1 - uscCutOff2 - uscCutOff3) * uscRate4;
        }
        return uscTotal = usc1 + usc2 + usc3 + usc4;
    }

    double deductionsTotalYearly;

    double CalculateTotalDeductions()
    {
        return deductionsTotalYearly = totalTaxPayableYearly + prsiTotal + uscTotal;
    }

    double incomeYearlyNet;
    double incomeWeeklyNet;

    double CalculateIncomeYearlyNet()
    {
        return incomeYearlyNet = incomeYearlyGross - deductionsTotalYearly;
    }

    double CalculateIncomeWeeklyNet()
    {
        return incomeWeeklyNet = incomeYearlyNet / 52;
    }

    public void Calculate()
    {
        CalculateIncomeWeeklyGross();
        CalculateIncomeYearlyGross();

        CalculateTotalTaxYearly();
        CalculateTotalTaxPayableYearly();
        CalculatePrsi();
        CalculateUsc();
        CalculateTotalDeductions();

        CalculateIncomeYearlyNet();
        CalculateIncomeWeeklyNet();
    }

}
